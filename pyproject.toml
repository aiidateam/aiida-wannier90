[build-system]
# build the package with [flit](https://flit.readthedocs.io)
requires = ["flit_core >=3.4,<4"]
build-backend = "flit_core.buildapi"

[project]
# See https://www.python.org/dev/peps/pep-0621/
name = "aiida-wannier90"
dynamic = ["version"] # read from aiida_wannier90/__init__.py
description = "AiiDA Plugin for the Wannier90 code"
authors = [
    { name = "Junfeng Qiao" },
    { name = "Dominik Gresch" },
    { name = "Antimo Marrazzo" },
    { name = "Daniel Marchand" },
    { name = "Giovanni Pizzi" },
    { name = "Norma Rivano" },
    { name = "The AiiDA team" }
]
readme = "README.md"
license = { file = "LICENSE.txt" }
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Framework :: AiiDA",
    "Environment :: Plugins",
    "License :: OSI Approved :: MIT License",
    "Operating System :: POSIX :: Linux",
    "Operating System :: MacOS :: MacOS X",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Natural Language :: English",
    "Topic :: Scientific/Engineering :: Physics",
    "Intended Audience :: Science/Research"
]
keywords = ["aiida", "plugin", "wannier90"]
requires-python = ">=3.8"
dependencies = ["aiida-core>=2.0,<3"]

[project.urls]
Source = "https://github.com/aiidateam/aiida-wannier90"
Documentation = "https://aiida-wannier90.readthedocs.io"

[project.optional-dependencies]
tests = [
    "pytest",
    "pytest-cov",
    "pytest-regressions~=1.0.6",
    "pytest-datadir~=1.3.1",
    "pgtest~=1.3.1",
    "codecov"
]
pre-commit = [
    "pre-commit",
    "pylint",
    "yapf>=0.28",
    "prospector>=1.3.1",
    "ruamel.yaml"
]
docs = ["sphinx", "sphinx-rtd-theme", "sphinxcontrib-details-directive"]
atomic_tools = ["ase"]

[project.entry-points."aiida.calculations"]
"wannier90.wannier90" = "aiida_wannier90.calculations:Wannier90Calculation"
"wannier90.postw90" = "aiida_wannier90.calculations:Postw90Calculation"

[project.entry-points."aiida.parsers"]
"wannier90.wannier90" = "aiida_wannier90.parsers:Wannier90Parser"
"wannier90.postw90" = "aiida_wannier90.parsers:Postw90Parser"

[project.entry-points."aiida.workflows"]
"wannier90.minimal" = "aiida_wannier90.workflows.minimal:MinimalW90WorkChain"

[tool.flit.module]
name = "aiida_wannier90"

[tool.pylint.format]
max-line-length = 120

[tool.pylint.tool-check]
generated-members = [
    "self.exit",
    "self.exit_codes.*",
    "Wannier90Calculation.exit_codes.*",
]

[tool.pylint.messages_control]
disable = [
    "too-many-ancestors",
    "invalid-name",
    "duplicate-code",
    "import-outside-toplevel",
    "fixme",
    # 'bad-continuation',
    # 'locally-disabled',
    # 'logging-format-interpolation',
    # 'inconsistent-return-statements',
    # 'no-else-raise',
    # 'too-many-arguments',
    'too-many-branches',
    'too-many-locals',
    # 'unspecified-encoding',

]

[tool.pylint.basic]
good-names = [
    'i',
    'j',
    'k',
    'l',
    'm',
    'n',
    'x',
    'y',
    'z',
    'mu',
    'qb',
    'df',
    'ax',
    'pw',
    'pk',
    'qe',
    'wannier',
    'SsspFamily',
    'StructureData',
    'UpfData',
    'HpCalculation',
    'PwCalculation',
    'SsspFamily',
    'PseudoDojoFamily',
    'CutoffsPseudoPotentialFamily',
]

[tool.pytest.ini_options]
minversion = '6.0'
testpaths = ['tests']
# python_files = "test_*.py example_*.py"
filterwarnings = [
    'ignore::DeprecationWarning:frozendict:',
    'ignore::DeprecationWarning:pkg_resources:',
    'ignore::DeprecationWarning:reentry:',
    'ignore::DeprecationWarning:sqlalchemy_utils:',
    "ignore::DeprecationWarning:aiida:",
    "ignore::DeprecationWarning:plumpy:",
    "ignore::DeprecationWarning:django:",
    "ignore::DeprecationWarning:yaml:",
]

[tool.coverage.run]
# Configuration of [coverage.py](https://coverage.readthedocs.io)
# reporting which lines of your plugin are covered by tests
source = ["aiida_wannier90"]

[tool.isort]
# Configuration of [isort](https://isort.readthedocs.io)
profile = "black"
force_sort_within_sections = true
sections = [
    'FUTURE',
    'STDLIB',
    'THIRDPARTY',
    'AIIDA',
    'AIIDA_QUANTUMESPRESSO',
    'FIRSTPARTY',
    'LOCALFOLDER'
]
known_aiida = ['aiida']
known_aiida_quantumespresso = ['aiida_quantumespresso']

[tool.tox]
legacy_tox_ini = """
[tox]
envlist = py38

[testenv]
usedevelop=True

[testenv:py{38,39,310}]
description = Run the test suite against a python version
extras = testing
commands = pytest {posargs}

[testenv:pre-commit]
description = Run the pre-commit checks
extras = pre-commit
commands = pre-commit run {posargs}

[testenv:docs]
description = Build the documentation
extras = docs
commands = sphinx-build -nW --keep-going -b html {posargs} docs/source docs/build/html
commands_post = echo "open file://{toxinidir}/docs/build/html/index.html"
"""
